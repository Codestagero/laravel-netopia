<?php

namespace Codestage\Netopia\Services;

use Codestage\Netopia\Contracts\PaymentService;
use Codestage\Netopia\Entities\{Address, EncryptedPayment, PaymentResult};
use Codestage\Netopia\Enums\PaymentStatus;
use Codestage\Netopia\Models\Payment;
use Exception;
use Illuminate\Support\Facades\{Config, URL};
use Netopia\Payment\Invoice;
use Netopia\Payment\Request\{Card, PaymentAbstract};

/**
 * @template TBillable
 * @extends PaymentService<TBillable>
 */
class DefaultPaymentService extends PaymentService
{
    /**
     * Execute a Netopia payment.
     *
     * @param Payment $payment
     * @throws Exception
     * @return EncryptedPayment
     */
    public function generateEncryptedPayment(Payment $payment): EncryptedPayment
    {
        $paymentRequest = new Card();
        $paymentRequest->signature = Config::get('netopia.signature'); //signature - generated by mobilpay.ro for every merchant account
        $paymentRequest->orderId = $payment->getKey(); // order_id should be unique for a merchant account
        $paymentRequest->confirmUrl = 'https://example.test/card/success'; // is where mobilPay redirects the client once the payment process is finished and is MANDATORY
        $paymentRequest->returnUrl = URL::route('netopia.return'); // is where mobilPay will send the payment result and is MANDATORY

        // Invoices info
        $paymentRequest->invoice = new Invoice();
        $paymentRequest->invoice->currency = $payment->currency;
        $paymentRequest->invoice->amount = (string) $payment->amount;
        $paymentRequest->invoice->tokenId = null;
        $paymentRequest->invoice->details = $payment->description;

        if ($payment->billing_address instanceof Address) {
            // Billing Info
            $paymentRequest->invoice->setBillingAddress($payment->billing_address->toNetopia());
        }

        if ($payment->shipping_address instanceof Address) {
            // Shipping Info
            $paymentRequest->invoice->setShippingAddress($payment->shipping_address->toNetopia());
        }

        // encrypting
        $paymentRequest->encrypt($this->certificatePath);

        /**
         * Send the following data to NETOPIA Payments server
         * Method : POST
         * URL : $paymentUrl.
         */
        $envKey = $paymentRequest->getEnvKey();
        $data = $paymentRequest->getEncData();

        return new EncryptedPayment($this->baseUrl, $envKey, $data, );
    }

    /**
     * Decrypt a Netopia payment.
     *
     * @param string $environment
     * @param string $data
     * @throws Exception
     * @return PaymentResult
     */
    public function decryptPayment(string $environment, string $data): PaymentResult
    {
        $paymentRequestIpn = PaymentAbstract::factoryFromEncrypted($environment, $data, $this->certificatePath);

        if ($paymentRequestIpn->objPmNotify->errorCode === 0) {
            $status = match ($paymentRequestIpn->objPmNotify->action) {
                'confirmed' => PaymentStatus::Confirmed,
                'paid_pending', 'confirmed_pending' => PaymentStatus::Pending,
                'paid' => PaymentStatus::Preauthorized,
                'canceled' => PaymentStatus::Cancelled,
                'credit' => PaymentStatus::Refunded,
            };
        } else {
            $status = PaymentStatus::Rejected;
        }

        return new PaymentResult($status, errorCode: $paymentRequestIpn->objPmNotify->errorCode, errorText: $paymentRequestIpn->objPmNotify->errorMessage);
    }
}
